import React, { useState } from 'react';
import { 
  Sidebar, 
  MessageList, 
  FileUpload, 
  QuickActions, 
  MessageInput, 
  Header,
  ParticleBackground
} from './components';
import useMessages from './hooks/useMessages';
import CohereService from './services/cohereService';

function App() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [currentFile, setCurrentFile] = useState(null);
  const [inputMessage, setInputMessage] = useState('');
  
  const {
    messages,
    isLoading,
    messagesEndRef,
    addMessage,
    resetMessages,
    formatTime,
    setIsLoading
  } = useMessages();

  const conversations = [
    { title: 'Video Speed Adjustment', preview: 'Speed up my video by 2x' },
    { title: 'Audio Enhancement', preview: 'Remove background noise' },
    { title: 'Video Cutting', preview: 'Cut from 0:30 to 2:15' }
  ];

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (inputMessage.trim() && !isLoading) {
      const userMessage = inputMessage.trim();
      addMessage(userMessage, 'user');
      setInputMessage('');
      setIsLoading(true);
      
      try {
        const aiResponse = await CohereService.generateResponse(
          userMessage, 
          currentFile?.name, 
          messages.slice(-10)
        );
        addMessage(aiResponse, 'assistant');
      } catch (error) {
        console.error('Cohere error:', error);
        addMessage("I'm sorry, I encountered an error. Please try again.", 'assistant');
      } finally {
        setIsLoading(false);
      }
    }
  };

  const handleNewChat = () => {
    resetMessages();
    setCurrentFile(null);
  };

  const handleFileSelect = (file) => {
    setCurrentFile(file);
    addMessage(`File uploaded: ${file.name}`, 'assistant');
    
    // Generate AI suggestions based on the uploaded file
    setTimeout(async () => {
      try {
        console.log('ü§ñ Generating suggestions for file:', file.name);
        const suggestions = await CohereService.getQuickActions(file.name, messages);
        if (suggestions && suggestions.length > 0) {
          addMessage(`Here are some things I can help you do with "${file.name}":\n\n‚Ä¢ ${suggestions.join('\n‚Ä¢ ')}`, 'assistant');
        }
      } catch (error) {
        console.error('‚ùå Error generating suggestions:', error);
      }
    }, 1000);
  };

  const handleActionClick = async (actionId) => {
    const actionMessages = {
      'speed-up': 'Speed up video',
      'cut-video': 'Cut video at specific time intervals',
      'grayscale': 'Convert to grayscale',
      'combine': 'Combine multiple clips',
      'enhance-audio': 'Enhance audio quality'
    };
    
    const actionMessage = actionMessages[actionId];
    addMessage(actionMessage, 'user');
    
    // Get AI response for the action
    setIsLoading(true);
    try {
      console.log('ü§ñ Processing action:', actionMessage);
      const aiResponse = await CohereService.generateResponse(
        actionMessage, 
        currentFile?.name, 
        messages.slice(-10)
      );
      console.log('‚úÖ Action response:', aiResponse);
      addMessage(aiResponse, 'assistant');
    } catch (error) {
      console.error('‚ùå Error processing action:', error);
      addMessage("I'm sorry, I encountered an error processing your request. Please try again.", 'assistant');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="relative flex h-screen overflow-hidden">
      <div className="relative z-10 flex h-screen w-full">
        <Sidebar
          isOpen={isSidebarOpen}
          onToggle={() => setIsSidebarOpen(!isSidebarOpen)}
          onNewChat={handleNewChat}
          conversations={conversations}
        />
        
        <div className="flex-1 flex flex-col bg-gradient-to-br from-gray-100 to-gray-200 relative">
          <ParticleBackground />
          
          <Header
            isSidebarOpen={isSidebarOpen}
            onToggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)}
            currentFile={currentFile}
          />

          <MessageList
            messages={messages}
            isLoading={isLoading}
            messagesEndRef={messagesEndRef}
            formatTime={formatTime}
          />

          <FileUpload
            onFileSelect={handleFileSelect}
            currentFile={currentFile}
          />

          <div className="border-t border-gray-300 bg-gray-200/70 p-4">
            <QuickActions onActionClick={handleActionClick} />
          </div>

          <MessageInput
            inputMessage={inputMessage}
            setInputMessage={setInputMessage}
            onSendMessage={handleSendMessage}
            isLoading={isLoading}
          />
        </div>
      </div>
    </div>
  );
}

export default App;
